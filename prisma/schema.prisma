generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id        String    @id @default(uuid())
  userId    String    @unique
  name      String
  imageId   String    @db.Text
  emaliId   String    @db.Text
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  servers   Server[]
  member    Member[]
  channel   Channel[]
}

model Server {
  id         String @id @default(uuid())
  name       String
  imageUrl   String @db.Text
  invitecode String @unique

  profileId String
  profile   Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  members   Member[]
  channel   Channel[]

  @@index([profileId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id   String     @id @default(uuid())
  role MemberRole @default(GUEST)

  profileId            String
  profile              Profile         @relation(fields: [profileId], references: [id], onDelete: Cascade)
  serverId             String
  messages             Message[]
  directmessages       Directmessage[]
  conversationIntiated Conversation[]  @relation("memberone")
  conversationReceived Conversation[]  @relation("membertwo")
  server               Server          @relation(fields: [serverId], references: [id], onDelete: Cascade)
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt

  @@index([profileId])
  @@index([serverId])
}

enum ChannelType {
  VEDIO
  AUDIO
  TEXT
}

model Channel {
  id        String      @id @default(uuid())
  name      String
  type      ChannelType @default(TEXT)
  profileId String
  profile   Profile     @relation(fields: [profileId], references: [id], onDelete: Cascade)
  serverId  String
  messages  Message[]
  server    Server      @relation(fields: [serverId], references: [id], onDelete: Cascade)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@index([profileId])
  @@index([serverId])
}

model Message {
  id      String @id @default(uuid())
  content String @db.Text

  fileUrl String? @db.Text

  memberId  String
  member    Member  @relation(fields: [memberId], references: [id], onDelete: Cascade)
  channelId String
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  deleted   Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([channelId])
  @@index([memberId])
}

model Conversation {
  id String @id @default(uuid())

  memberoneId String
  memberone   Member @relation("memberone", fields: [memberoneId], references: [id], onDelete: Cascade)

  membertwoId    String
  membertwo      Member          @relation("membertwo", fields: [membertwoId], references: [id], onDelete: Cascade)
  directmessages Directmessage[]

  @@unique([memberoneId, membertwoId])
  @@index([membertwoId])
}

model Directmessage {
  id            String       @id @default(uuid())
  content       String       @db.Text
  fileUrl       String?      @db.Text
  memberId      String
  member        Member       @relation(fields: [memberId], references: [id], onDelete: Cascade)
  converationId String
  conversation  Conversation @relation(fields: [converationId], references: [id], onDelete: Cascade)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  deleted Boolean @default(false)

  @@index([memberId])
  @@index([converationId])
}
